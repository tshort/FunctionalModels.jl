var documenterSearchIndex = {"docs":
[{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"CurrentModule = Sims.Lib","category":"page"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"Pages = [\"blocks.md\"]\nDepth = 5","category":"page"},{"location":"lib/blocks/#Control-and-signal-blocks","page":"Control and signal blocks","title":"Control and signal blocks","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"These components are modeled after the Modelica.Blocks.* library.","category":"page"},{"location":"lib/blocks/#Continuous-linear","page":"Control and signal blocks","title":"Continuous linear","text":"","category":"section"},{"location":"lib/blocks/#Integrator","page":"Control and signal blocks","title":"Integrator","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"Integrator","category":"page"},{"location":"lib/blocks/#Sims.Lib.Integrator","page":"Control and signal blocks","title":"Sims.Lib.Integrator","text":"Output the integral of the input signals\n\nIntegrator(u::Signal, y::Signal; k = 1.0, y_start = 0.0)\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nk : integrator gains\ny_start : output initial value\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#Derivative","page":"Control and signal blocks","title":"Derivative","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"Derivative","category":"page"},{"location":"lib/blocks/#Sims.Lib.Derivative","page":"Control and signal blocks","title":"Sims.Lib.Derivative","text":"Approximated derivative block\n\nThis blocks defines the transfer function between the input u and the output y element-wise as the approximated derivative:\n\n             k[i] * s\n     y[i] = ------------ * u[i]\n            T[i] * s + 1\n\nIf you would like to be able to change easily between different transfer functions (FirstOrder, SecondOrder, ... ) by changing parameters, use the general block TransferFunction instead and model a derivative block with parameters as:\n\n    b = [k,0]; a = [T, 1]\n\nDerivative(u::Signal, y::Signal; T = 1.0, k = 1.0, x_start = 0.0, y_start = 0.0)\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nk : gains\nT : Time constants [sec]\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#FirstOrder","page":"Control and signal blocks","title":"FirstOrder","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"FirstOrder","category":"page"},{"location":"lib/blocks/#Sims.Lib.FirstOrder","page":"Control and signal blocks","title":"Sims.Lib.FirstOrder","text":"First order transfer function block (= 1 pole)\n\nThis blocks defines the transfer function between the input u=inPort.signal and the output y=outPort.signal element-wise as first order system:\n\n               k[i]\n     y[i] = ------------ * u[i]\n            T[i] * s + 1\n\nIf you would like to be able to change easily between different transfer functions (FirstOrder, SecondOrder, ... ) by changing parameters, use the general block TransferFunction instead and model a derivative block with parameters as:\n\n    b = [k,0]; a = [T, 1]\n\nFirstOrder(u::Signal, y::Signal; T = 1.0, k = 1.0, y_start = 0.0)\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nk : gains\nT : Time constants [sec]\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#LimPID","page":"Control and signal blocks","title":"LimPID","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"LimPID","category":"page"},{"location":"lib/blocks/#Sims.Lib.LimPID","page":"Control and signal blocks","title":"Sims.Lib.LimPID","text":"PID controller with limited output, anti-windup compensation and setpoint weighting\n\n(Image: diagram)\n\nLimPID(u_s::Signal, u_m::Signal, y::Signal; \n       controllerType = \"PID\",\n       k = 1.0,      \n       Ti = 1.0,    \n       Td = 1.0,   \n       yMax = 1.0,   \n       yMin = -yMax, \n       wp = 1.0,     \n       wd = 0.0,     \n       Ni = 0.9,    \n       Nd = 10.0,    \n       xi_start = 0.0, \n       xd_start = 0.0,\n       y_start = 0.0)\n\nArguments\n\nu_s::Signal : input setpoint\nu_m::Signal : input measurement\ny_s::Signal : output\n\nKeyword/Optional Arguments\n\nk    : Gain of PID block                                  \nTi   : Time constant of Integrator block [s]\nTd   : Time constant of Derivative block [s]\nyMax : Upper limit of output\nyMin : Lower limit of output\nwp   : Set-point weight for Proportional block (0..1)\nwd   : Set-point weight for Derivative block (0..1)\nNi   : Ni*Ti is time constant of anti-windup compensation\nNd   : The higher Nd, the more ideal the derivative block\n\nDetails\n\nThis is a PID controller incorporating several practical aspects. It is designed according to chapter 3 of the book:\n\nK. Astroem, T. Haegglund: PID Controllers: Theory, Design, and Tuning. 2nd edition, 1995.\n\nBesides the additive proportional, integral and derivative part of this controller, the following practical aspects are included:\n\nThe output of this controller is limited. If the controller is in its limits, anti-windup compensation is activated to drive the integrator state to zero.\nThe high-frequency gain of the derivative part is limited to avoid excessive amplification of measurement noise.\nSetpoint weighting is present, which allows to weight the setpoint in the proportional and the derivative part independantly from the measurement. The controller will respond to load disturbances and measurement noise independantly of this setting (parameters wp, wd). However, setpoint changes will depend on this setting. For example, it is useful to set the setpoint weight wd for the derivative part to zero, if steps may occur in the setpoint signal.\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#StateSpace","page":"Control and signal blocks","title":"StateSpace","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"StateSpace","category":"page"},{"location":"lib/blocks/#Sims.Lib.StateSpace","page":"Control and signal blocks","title":"Sims.Lib.StateSpace","text":"Linear state space system\n\nModelica.Blocks.Continuous.StateSpace Information\n\nThe State Space block defines the relation between the input u=inPort.signal and the output y=outPort.signal in state space form:\n\nder(x) = A * x + B * u\n    y  = C * x + D * u\n\nThe input is a vector of length nu, the output is a vector of length ny and nx is the number of states. Accordingly\n\n    A has the dimension: A(nx,nx), \n    B has the dimension: B(nx,nu), \n    C has the dimension: C(ny,nx), \n    D has the dimension: D(ny,nu)\n\nExample:\n\n     StateSpace(u, y; A = [0.12, 2; 3, 1.5], \n                      B = [2,    7; 3, 1],\n                      C = [0.1, 2],\n                      D = zeros(length(y),length(u)))\n\nresults in the following equations:\n\n  [der(x[1])]   [0.12  2.00] [x[1]]   [2.0  7.0] [u[1]]\n  [         ] = [          ]*[    ] + [        ]*[    ]\n  [der(x[2])]   [3.00  1.50] [x[2]]   [0.1  2.0] [u[2]]\n\n                             [x[1]]            [u[1]]\n       y[1]   = [0.1  2.0] * [    ] + [0  0] * [    ]\n                             [x[2]]            [u[2]]\n\nStateSpace(u::Signal, y::Signal; A = [1.0], B = [1.0], C = [1.0], D = [0.0])\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nA : Matrix A of state space model\nB : Vector B of state space model\nC : Vector C of state space model\nD : Matrix D of state space model\n\nDetails\n\nNOTE: untested / probably broken\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#TransferFunction","page":"Control and signal blocks","title":"TransferFunction","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"TransferFunction","category":"page"},{"location":"lib/blocks/#Sims.Lib.TransferFunction","page":"Control and signal blocks","title":"Sims.Lib.TransferFunction","text":"Linear transfer function\n\nThis block defines the transfer function between the input u=inPort.signal[1] and the output y=outPort.signal[1] as (nb = dimension of b, na = dimension of a):\n\n           b[1]*s^[nb-1] + b[2]*s^[nb-2] + ... + b[nb]\n   y(s) = --------------------------------------------- * u(s)\n           a[1]*s^[na-1] + a[2]*s^[na-2] + ... + a[na]\n\nState variables x are defined according to controller canonical form. Initial values of the states can be set as start values of x.\n\nExample:\n\n     TransferFunction(u, y, b = [2,4], a = [1,3])\n\nresults in the following transfer function:\n\n        2*s + 4\n   y = --------- * u\n         s + 3\n\nTransferFunction(u::Signal, y::Signal; b = [1], a = [1])\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nb : Numerator coefficients of transfer function\na : Denominator coefficients of transfer function\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#Nonlinear","page":"Control and signal blocks","title":"Nonlinear","text":"","category":"section"},{"location":"lib/blocks/#Limiter","page":"Control and signal blocks","title":"Limiter","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"Limiter","category":"page"},{"location":"lib/blocks/#Sims.Lib.Limiter","page":"Control and signal blocks","title":"Sims.Lib.Limiter","text":"Limit the range of a signal\n\nThe Limiter block passes its input signal as output signal as long as the input is within the specified upper and lower limits. If this is not the case, the corresponding limits are passed as output.\n\nLimiter(u::Signal, y::Signal; uMax = 1.0, uMin = -uMax)\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nuMax : upper limits of signals\nuMin : lower limits of signals\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#Step","page":"Control and signal blocks","title":"Step","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"Step","category":"page"},{"location":"lib/blocks/#Sims.Lib.Step","page":"Control and signal blocks","title":"Sims.Lib.Step","text":"Generate step signals of type Real\n\nStep(y::Signal; height = 1.0, offset = 0.0, startTime = 0.0)\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nheight : heights of steps\noffset : offsets of output signals\nstartTime : output = offset for time < startTime [s]\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#DeadZone","page":"Control and signal blocks","title":"DeadZone","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"DeadZone","category":"page"},{"location":"lib/blocks/#Sims.Lib.DeadZone","page":"Control and signal blocks","title":"Sims.Lib.DeadZone","text":"Provide a region of zero output\n\nThe DeadZone block defines a region of zero output.\n\nIf the input is within uMin ... uMax, the output is zero. Outside of this zone, the output is a linear function of the input with a slope of 1.\n\nDeadZone(u::Signal, y::Signal; uMax = 1.0, uMin = -uMax)\n\nArguments\n\nu::Signal : input\ny::Signal : output\n\nKeyword/Optional Arguments\n\nuMax : upper limits of signals\nuMin : lower limits of signals\n\n\n\n\n\n","category":"function"},{"location":"lib/blocks/#BooleanPulse","page":"Control and signal blocks","title":"BooleanPulse","text":"","category":"section"},{"location":"lib/blocks/","page":"Control and signal blocks","title":"Control and signal blocks","text":"BooleanPulse","category":"page"},{"location":"lib/blocks/#Sims.Lib.BooleanPulse","page":"Control and signal blocks","title":"Sims.Lib.BooleanPulse","text":"Generate a Discrete boolean pulse signal\n\nBooleanPulse(y; width = 50.0, period = 1.0, startTime = 0.0)\n\nArguments\n\ny::Signal : output signal\n\nKeyword/Optional Arguments\n\nwidth : width of pulse in the percent of period [0 - 100]\nperiod : time for one period [sec]\nstartTime : time instant of the first pulse [sec]\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"CurrentModule = Sims.Lib","category":"page"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Pages = [\"electrical.md\"]\nDepth = 5","category":"page"},{"location":"lib/electrical/#Analog-electrical-models","page":"Analog electrical models","title":"Analog electrical models","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"This library of components is modeled after the Modelica.Electrical.Analog library.","category":"page"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Voltage nodes with type Voltage are the main Unknown type used in electrical circuits. voltage nodes can be single floating point unknowns representing a single voltage node. A Voltage can also be an array representing multiphase circuits or multiple node positions. Lastly, Voltage unknowns can also be complex for use with quasiphasor-type solutions.","category":"page"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"The type ElectricalNode is a Union type that can be an Array, a number, an expression, or an Unknown. This is used in model functions to allow passing a Voltage node or a real value (like 0.0 for ground).","category":"page"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Example","category":"page"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"function ex_ChuaCircuit()\n    @variables n1(t) n2(t) n3(t) = 4.0\n    g = 0.0\n    function NonlinearResistor(n1::ElectricalNode, n2::ElectricalNode; Ga, Gb, Ve)\n        i = Current(compatible_values(n1, n2))\n        v = Voltage(compatible_values(n1, n2))\n        [\n            Branch(n1, n2, v, i)\n            i = ifelse(v < -Ve, Gb .* (v + Ve) - Ga .* Ve,\n                       ifelse(v > Ve, Gb .* (v - Ve) + Ga*Ve, Ga*v))\n        ]\n    end\n    [\n        Resistor(n1, g,  R = 12.5e-3) \n        Inductor(n1, n2, L = 18.0)\n        Resistor(n2, n3, R = 1 / 0.565) \n        Capacitor(n2, g, C = 100.0)\n        Capacitor(n3, g, C = 10.0)\n        NonlinearResistor(n3, g, Ga = -0.757576, Gb = -0.409091, Ve = 1.0)\n    ]\nend\n","category":"page"},{"location":"lib/electrical/#Basics","page":"Analog electrical models","title":"Basics","text":"","category":"section"},{"location":"lib/electrical/#Resistor","page":"Analog electrical models","title":"Resistor","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Resistor","category":"page"},{"location":"lib/electrical/#Sims.Lib.Resistor","page":"Analog electrical models","title":"Sims.Lib.Resistor","text":"The linear resistor connects the branch voltage v with the branch current i by i*R = v. The Resistance R is allowed to be positive, zero, or negative. \n\nResistor(n1::ElectricalNode, n2::ElectricalNode; \n         R = 1.0, T = 293.15, T_ref = 300.15, alpha = 0.0)\nResistor(n1::ElectricalNode, n2::ElectricalNode, hp::HeatPort; \n         R = 1.0, T = 293.15, T_ref = 300.15, alpha = 0.0)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\n\nKeyword/Optional Arguments\n\nR::Signal : Resistance at temperature T_ref [ohms], default = 1.0 ohms\nhp::HeatPort : Heat port [K], optional                \nT::HeatPort : Fixed device temperature or HeatPort [K], default = T_ref\nT_ref::Signal : Reference temperature [K], default = 300.15K\nalpha::Signal : Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))) [1/K], default = 0.0\n\nDetails\n\nThe resistance R is optionally temperature dependent according to the following equation:\n\nR = R_ref*(1 + alpha*(hp.T - T_ref))\n\nWith the optional hp HeatPort argument, the power will be dissipated into this HeatPort.\n\nThe resistance R can be a constant numeric value or an Unknown, meaning it can vary with time. Note: it is recommended that the R signal should not cross the zero value. Otherwise, depending on the surrounding circuit, the probability of singularities is high.\n\nThis device is vectorizable using array inputs for one or both of n1 and n2.\n\nExample\n\nfunction model()\n    @variables n1\n    g = 0.0\n    [\n        :vsrc => SineVoltage(n1, g, V = 100.0)\n        :r1   => Resistor(n1, g, R = 3.0, T = 330.0, alpha = 1.0)\n    ]\nend\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#Capacitor","page":"Analog electrical models","title":"Capacitor","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Capacitor","category":"page"},{"location":"lib/electrical/#Sims.Lib.Capacitor","page":"Analog electrical models","title":"Sims.Lib.Capacitor","text":"The linear capacitor connects the branch voltage v with the branch current i by i = C * dv/dt. \n\nCapacitor(n1::ElectricalNode, n2::ElectricalNode; C::Signal) \n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\n\nKeyword/Optional Arguments\n\nC::Signal : Capacitance [F]\n\nDetails\n\nC can be a constant numeric value or an Unknown, meaning it can vary with time. If C is a constant, it may be positive, zero, or negative. If C is a signal, it should be greater than zero.\n\nThis device is vectorizable using array inputs for one or both of n1 and n2.\n\nExample\n\nfunction model()\n    @variables n1(t)\n    g = 0.0\n    [\n        SineVoltage(n1, g, V = 100.0)\n        Resistor(n1, g, R = 3.0)\n        Capacitor(n1, g, C = 1.0)\n    ]\nend\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#Inductor","page":"Analog electrical models","title":"Inductor","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Inductor","category":"page"},{"location":"lib/electrical/#Sims.Lib.Inductor","page":"Analog electrical models","title":"Sims.Lib.Inductor","text":"The linear inductor connects the branch voltage v with the branch current i by v = L * di/dt. \n\nInductor(n1::ElectricalNode, n2::ElectricalNode; L::Signal)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\n\nKeyword/Optional Arguments\n\nL::Signal : Inductance [H]\n\nDetails\n\nL can be a constant numeric value or an Unknown, meaning it can vary with time. If L is a constant, it may be positive, zero, or negative. If L is a signal, it should be greater than zero.\n\nThis device is vectorizable using array inputs for one or both of n1 and n2\n\nExample\n\nfunction model()\n    @variables n1(t)\n    g = 0.0\n    [\n        SineVoltage(n1, g, V = 100.0)\n        Resistor(n1, g, R = 3.0)\n        Inductor(n1, g, L = 6.0)\n    ]\nend\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#SaturatingInductor","page":"Analog electrical models","title":"SaturatingInductor","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"SaturatingInductor","category":"page"},{"location":"lib/electrical/#Sims.Lib.SaturatingInductor","page":"Analog electrical models","title":"Sims.Lib.SaturatingInductor","text":"To be done...\n\nSaturatingInductor as implemented in the Modelica Standard Library depends on a Discrete value that is not fixed. This is not currently supported. Only Unknowns can currently be solved during initial conditions.\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#Transformer","page":"Analog electrical models","title":"Transformer","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Transformer","category":"page"},{"location":"lib/electrical/#Sims.Lib.Transformer","page":"Analog electrical models","title":"Sims.Lib.Transformer","text":"The transformer is a two port. The left port voltage v1, left port current i1, right port voltage v2 and right port current i2 are connected by the following relation:\n\n| v1 |         | L1   M  |  | i1' |\n|    |    =    |         |  |     |\n| v2 |         | M    L2 |  | i2' |\n\nL1, L2, and M are the primary, secondary, and coupling inductances respectively.\n\nTransformer(p1::ElectricalNode, n1::ElectricalNode, p2::ElectricalNode, n2::ElectricalNode; \n            L1 = 1.0, L2 = 1.0, M = 1.0)\n\nArguments\n\np1::ElectricalNode : Positive electrical node of the left port (potential p1 > n1 for positive voltage drop v1) [V]\nn1::ElectricalNode : Negative electrical node of the left port [V]\np2::ElectricalNode : Positive electrical node of the right port (potential p2 > n2 for positive voltage drop v2) [V]\nn2::ElectricalNode : Negative electrical node of the right port [V]\n\nKeyword/Optional Arguments\n\nL1::Signal : Primary inductance [H]\nL2::Signal : Secondary inductance [H]\nM::Signal  : Coupling inductance [H]\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#EMF","page":"Analog electrical models","title":"EMF","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"EMF","category":"page"},{"location":"lib/electrical/#Sims.Lib.EMF","page":"Analog electrical models","title":"Sims.Lib.EMF","text":"EMF transforms electrical energy into rotational mechanical energy. It is used as basic building block of an electrical motor. The mechanical connector flange can be connected to elements of the rotational library. \n\nEMF(n1::ElectricalNode, n2::ElectricalNode, flange::Flange,\n    support_flange = 0.0, k = 1.0)\nEMF(n1::ElectricalNode, n2::ElectricalNode, flange::Flange;\n    support_flange = 0.0, k = 1.0)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\nflange::Flange : Rotational shaft\n\nKeyword/Optional Arguments\n\nsupport_flange : Support/housing of the EMF shaft \nk : Transformation coefficient [N.m/A] \n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#Ideal","page":"Analog electrical models","title":"Ideal","text":"","category":"section"},{"location":"lib/electrical/#IdealDiode","page":"Analog electrical models","title":"IdealDiode","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"IdealDiode","category":"page"},{"location":"lib/electrical/#Sims.Lib.IdealDiode","page":"Analog electrical models","title":"Sims.Lib.IdealDiode","text":"This is an ideal switch which is open (off), if it is reversed biased (voltage drop less than 0) closed (on), if it is conducting (current > 0). This is the behaviour if all parameters are exactly zero. Note, there are circuits, where this ideal description with zero resistance and zero cinductance is not possible. In order to prevent singularities during switching, the opened diode has a small conductance Gon and the closed diode has a low resistance Roff which is default.\n\nThe parameter Vknee which is the forward threshold voltage, allows to displace the knee point along the Gon-characteristic until v = Vknee. \n\nIdealDiode(n1::ElectricalNode, n2::ElectricalNode; \n           Vknee = 0.0, Ron = 1e-5, Goff = 1e-5)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\n\nKeyword/Optional Arguments\n\nVknee : Forward threshold voltage [V], default = 0.0\nRon : Closed diode resistance [Ohm], default = 1.E-5\nGoff : Opened diode conductance [S], default = 1.E-5\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#IdealThyristor","page":"Analog electrical models","title":"IdealThyristor","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"IdealThyristor","category":"page"},{"location":"lib/electrical/#Sims.Lib.IdealThyristor","page":"Analog electrical models","title":"Sims.Lib.IdealThyristor","text":"This is an ideal thyristor model which is open (off), if the voltage drop is less than 0 or fire is false closed (on), if the voltage drop is greater or equal 0 and fire is true.\n\nThis is the behaviour if all parameters are exactly zero. Note, there are circuits, where this ideal description with zero resistance and zero cinductance is not possible. In order to prevent singularities during switching, the opened thyristor has a small conductance Goff and the closed thyristor has a low resistance Ron which is default.\n\nThe parameter Vknee which is the forward threshold voltage, allows to displace the knee point along the Goff-characteristic until v = Vknee. \n\nIdealThyristor(n1::ElectricalNode, n2::ElectricalNode, fire; \n               Vknee = 0.0, Ron = 1e-5, Goff = 1e-5)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\nfire : Discrete bool variable indicating firing of the thyristor\n\nKeyword/Optional Arguments\n\nVknee : Forward threshold voltage [V], default = 0.0\nRon : Closed thyristor resistance [Ohm], default = 1.E-5\nGoff : Opened thyristor conductance [S], default = 1.E-5\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#IdealOpAmp","page":"Analog electrical models","title":"IdealOpAmp","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"IdealOpAmp","category":"page"},{"location":"lib/electrical/#Sims.Lib.IdealOpAmp","page":"Analog electrical models","title":"Sims.Lib.IdealOpAmp","text":"The ideal OpAmp is a two-port device. The left port is fixed to v1=0 and i1=0 (nullator). At the right port, both any voltage v2 and any current i2 are possible (norator).\n\nThe ideal OpAmp with three pins is of exactly the same behaviour as the ideal OpAmp with four pins. Only the negative output pin is left out. Both the input voltage and current are fixed to zero (nullator). At the output pin both any voltage v2 and any current i2 are possible.\n\nIdealOpAmp(p1::ElectricalNode, n1::ElectricalNode, p2::ElectricalNode, n2::ElectricalNode)\nIdealOpAmp(p1::ElectricalNode, n1::ElectricalNode, p2::ElectricalNode)\n\nArguments\n\np1::ElectricalNode : Positive electrical node of the left port (potential p1 > n1 for positive voltage drop v1) [V]\nn1::ElectricalNode : Negative electrical node of the left port [V]\np2::ElectricalNode : Positive electrical node of the right port (potential p2 > n2 for positive voltage drop v2) [V]\nn2::ElectricalNode : Negative electrical node of the right port [V], defaults to 0.0 V\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#IdealOpeningSwitch","page":"Analog electrical models","title":"IdealOpeningSwitch","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"IdealOpeningSwitch","category":"page"},{"location":"lib/electrical/#Sims.Lib.IdealOpeningSwitch","page":"Analog electrical models","title":"Sims.Lib.IdealOpeningSwitch","text":"The ideal opening switch has a positive pin p and a negative pin n. The switching behaviour is controlled by the input signal control. If control is true, pin p is not connected with negative pin n. Otherwise, pin p is connected with negative pin n.\n\nIn order to prevent singularities during switching, the opened switch has a (very low) conductance Goff and the closed switch has a (very low) resistance Ron. The limiting case is also allowed, i.e., the resistance Ron of the closed switch could be exactly zero and the conductance Goff of the open switch could be also exactly zero. Note, there are circuits, where a description with zero Ron or zero Goff is not possible.\n\nIdealOpeningSwitch(n1::ElectricalNode, n2::ElectricalNode, control;\n                   Ron = 1e-5, Goff = 1e-5)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\ncontrol : true => switch open, false => n1-n2 connected\n\nKeyword/Optional Arguments\n\nRon : Closed switch resistance [Ohm], default = 1.E-5\nGoff : Opened switch conductance [S], default = 1.E-5\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#IdealClosingSwitch","page":"Analog electrical models","title":"IdealClosingSwitch","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"IdealClosingSwitch","category":"page"},{"location":"lib/electrical/#Sims.Lib.IdealClosingSwitch","page":"Analog electrical models","title":"Sims.Lib.IdealClosingSwitch","text":"The ideal closing switch has a positive pin p and a negative pin n. The switching behaviour is controlled by input signal control. If control is true, pin p is connected with negative pin n. Otherwise, pin p is not connected with negative pin n.\n\nIn order to prevent singularities during switching, the opened switch has a (very low) conductance Goff and the closed switch has a (very low) resistance Ron. The limiting case is also allowed, i.e., the resistance Ron of the closed switch could be exactly zero and the conductance Goff of the open switch could be also exactly zero. Note, there are circuits, where a description with zero Ron or zero Goff is not possible.\n\nIdealClosingSwitch(n1::ElectricalNode, n2::ElectricalNode, control;\n                   Ron = 1e-5, Goff = 1e-5)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\ncontrol : true => n1-n2 connected, false => switch open\n\nKeyword/Optional Arguments\n\nRon : Closed switch resistance [Ohm], default = 1.E-5\nGoff : Opened switch conductance [S], default = 1.E-5\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#ControlledIdealOpeningSwitch","page":"Analog electrical models","title":"ControlledIdealOpeningSwitch","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"ControlledIdealOpeningSwitch","category":"page"},{"location":"lib/electrical/#Sims.Lib.ControlledIdealOpeningSwitch","page":"Analog electrical models","title":"Sims.Lib.ControlledIdealOpeningSwitch","text":"TBD\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#ControlledIdealClosingSwitch","page":"Analog electrical models","title":"ControlledIdealClosingSwitch","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"ControlledIdealClosingSwitch","category":"page"},{"location":"lib/electrical/#Sims.Lib.ControlledIdealClosingSwitch","page":"Analog electrical models","title":"Sims.Lib.ControlledIdealClosingSwitch","text":"TBD\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#Semiconductors","page":"Analog electrical models","title":"Semiconductors","text":"","category":"section"},{"location":"lib/electrical/#Diode","page":"Analog electrical models","title":"Diode","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"Diode","category":"page"},{"location":"lib/electrical/#Sims.Lib.Diode","page":"Analog electrical models","title":"Sims.Lib.Diode","text":"The simple diode is a one port. It consists of the diode itself and an parallel ohmic resistance R. The diode formula is:\n\ni  =  ids * ( e^(v/vt) - 1 )\n\nIf the exponent v/vt reaches the limit maxex, the diode characterisic is linearly continued to avoid overflow.\n\nDiode(n1::ElectricalNode, n2::ElectricalNode; \n      Ids = 1e-6,  Vt = 0.04,  Maxexp = 15,  R = 1e8)\nDiode(n1::ElectricalNode, n2::ElectricalNode; hp::HeatPort;\n      Ids = 1e-6,  Vt = 0.04,  Maxexp = 15,  R = 1e8)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\nhp::HeatPort : Heat port [K]                \n\nKeyword/Optional Arguments\n\nIds : Saturation current [A], default = 1.e-6\nVt : Voltage equivalent of temperature (kT/qn) [V], default = 0.04\nMaxexp : Max. exponent for linear continuation, default = 15.0\nR : Parallel ohmic resistance [Ohm], default = 1.e8\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#ZDiode","page":"Analog electrical models","title":"ZDiode","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"ZDiode","category":"page"},{"location":"lib/electrical/#Sims.Lib.ZDiode","page":"Analog electrical models","title":"Sims.Lib.ZDiode","text":"TBD\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#Sources","page":"Analog electrical models","title":"Sources","text":"","category":"section"},{"location":"lib/electrical/#SignalVoltage","page":"Analog electrical models","title":"SignalVoltage","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"SignalVoltage","category":"page"},{"location":"lib/electrical/#Sims.Lib.SignalVoltage","page":"Analog electrical models","title":"Sims.Lib.SignalVoltage","text":"The signal voltage source is a parameterless converter of real valued signals into a source voltage.\n\nThis voltage source may be vectorized.\n\nSignalVoltage(n1::ElectricalNode, n2::ElectricalNode; V::Signal)  \n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\nV::Signal : Voltage between n1 and n2 (= n1 - n2) as an input signal\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#SineVoltage","page":"Analog electrical models","title":"SineVoltage","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"SineVoltage","category":"page"},{"location":"lib/electrical/#Sims.Lib.SineVoltage","page":"Analog electrical models","title":"Sims.Lib.SineVoltage","text":"A sinusoidal voltage source. An offset parameter is introduced, which is added to the value calculated by the blocks source. The startTime parameter allows to shift the blocks source behavior on the time axis.\n\nThis voltage source may be vectorized.\n\nSineVoltage(n1::ElectricalNode, n2::ElectricalNode; \n            V = 1.0,  f = 1.0,  ang = 0.0,  offset = 0.0)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\n\nKeyword/Optional Arguments\n\nV : Amplitude of sine wave [V], default = 1.0\nphase : Phase of sine wave [rad], default = 0.0\nfreqHz : Frequency of sine wave [Hz], default = 1.0\noffset : Voltage offset [V], default = 0.0\nstartTime : Time offset [s], default = 0.0\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#StepVoltage","page":"Analog electrical models","title":"StepVoltage","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"StepVoltage","category":"page"},{"location":"lib/electrical/#Sims.Lib.StepVoltage","page":"Analog electrical models","title":"Sims.Lib.StepVoltage","text":"A step voltage source. An event is introduced at the transition. Probably cannot be vectorized.\n\nStepVoltage(n1::ElectricalNode, n2::ElectricalNode; \n            V = 1.0,  start = 0.0,  offset = 0.0)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\n\nKeyword/Optional Arguments\n\nV : Height of step [V], default = 1.0\noffset : Voltage offset [V], default = 0.0\nstartTime : Time offset [s], default = 0.0\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#SignalCurrent","page":"Analog electrical models","title":"SignalCurrent","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"SignalCurrent","category":"page"},{"location":"lib/electrical/#Sims.Lib.SignalCurrent","page":"Analog electrical models","title":"Sims.Lib.SignalCurrent","text":"The signal current source is a parameterless converter of real valued signals into a current voltage.\n\nThis current source may be vectorized.\n\nSignalCurrent(n1::ElectricalNode, n2::ElectricalNode; I::Signal)  \n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\nI::Signal : Current flowing from n1 to n2 as an input signal\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#Utilities","page":"Analog electrical models","title":"Utilities","text":"","category":"section"},{"location":"lib/electrical/#SeriesProbe","page":"Analog electrical models","title":"SeriesProbe","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"SeriesProbe","category":"page"},{"location":"lib/electrical/#Sims.Lib.SeriesProbe","page":"Analog electrical models","title":"Sims.Lib.SeriesProbe","text":"Connect a series current probe between two nodes. This is vectorizable.\n\nSeriesProbe(n1, n2; name::AbstractString)\n\nArguments\n\nn1 : Positive node\nn2 : Negative node\nname::AbstractString : The name of the probe\n\nExample\n\nfunction model()\n    n1 = Voltage(\"n1\")\n    n2 = Voltage()\n    g = 0.0\n    [\n        SineVoltage(n1, g, V = 100.0)\n        SeriesProbe(n1, n2, \"current\")\n        Resistor(n2, g, R = 2.0)\n    ]\nend\ny = sim(model())\n\n\n\n\n\n","category":"function"},{"location":"lib/electrical/#BranchHeatPort","page":"Analog electrical models","title":"BranchHeatPort","text":"","category":"section"},{"location":"lib/electrical/","page":"Analog electrical models","title":"Analog electrical models","text":"BranchHeatPort","category":"page"},{"location":"lib/electrical/#Sims.Lib.BranchHeatPort","page":"Analog electrical models","title":"Sims.Lib.BranchHeatPort","text":"Wrap argument model with a heat port that captures the power generated by the electrical device. This is vectorizable.\n\nBranchHeatPort(n1::ElectricalNode, n2::ElectricalNode, hp::HeatPort,\n               model::Function, args...)\n\nArguments\n\nn1::ElectricalNode : Positive electrical node [V]\nn2::ElectricalNode : Negative electrical node [V]\nhp::HeatPort : Heat port [K]                \nmodel::Function : Model to wrap\nargs... : Arguments passed to model  \n\nExamples\n\nHere's an example of a definition defining a Resistor that uses a heat port (a Temperature) in terms of another model:\n\nfunction ResistorWithHeating(n1::ElectricalNode, n2::ElectricalNode, R::Signal, hp::Temperature; T_ref::Signal, alpha::Signal) \n    BranchHeatPort(n1, n2, hp, Resistor, R .* (1 + alpha .* (hp - T_ref)))\nend\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"CurrentModule = Sims.Examples.Lib","category":"page"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"Pages = [\"lib.md\"]\nDepth = 5","category":"page"},{"location":"examples/lib/#Sims.Lib","page":"Sims.Lib","title":"Sims.Lib","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"Examples using models from the Sims standard library (Sims.Lib).","category":"page"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"Many of these are patterned after the examples in the Modelica Standard Library.","category":"page"},{"location":"examples/lib/#Electrical","page":"Sims.Lib","title":"Electrical","text":"","category":"section"},{"location":"examples/lib/#CauerLowPassAnalog","page":"Sims.Lib","title":"CauerLowPassAnalog","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"CauerLowPassAnalog","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.CauerLowPassAnalog","page":"Sims.Lib","title":"Sims.Examples.Lib.CauerLowPassAnalog","text":"Cauer low-pass filter with analog components\n\nThe example Cauer Filter is a low-pass-filter of the fifth order. It is realized using an analog network. The voltage source on n1 is the input voltage (step), and n4 is the filter output voltage. The pulse response is calculated.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#CauerLowPassOPV","page":"Sims.Lib","title":"CauerLowPassOPV","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"CauerLowPassOPV","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.CauerLowPassOPV","page":"Sims.Lib","title":"Sims.Examples.Lib.CauerLowPassOPV","text":"Cauer low-pass filter with operational amplifiers\n\nThe example Cauer Filter is a low-pass-filter of the fifth order. It is realized using an analog network with op amps. The voltage source on n[1] is the input voltage (step), and n[10] is the filter output voltage. The pulse response is calculated.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#CauerLowPassOPV2","page":"Sims.Lib","title":"CauerLowPassOPV2","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"CauerLowPassOPV2","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.CauerLowPassOPV2","page":"Sims.Lib","title":"Sims.Examples.Lib.CauerLowPassOPV2","text":"Cauer low-pass filter with operational amplifiers (alternate implementation)\n\nThe example Cauer Filter is a low-pass-filter of the fifth order. It is realized using an analog network with op amps. The voltage source on n1 is the input voltage (step), and n10 is the filter output voltage. The pulse response is calculated.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#CharacteristicIdealDiodes","page":"Sims.Lib","title":"CharacteristicIdealDiodes","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"CharacteristicIdealDiodes","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.CharacteristicIdealDiodes","page":"Sims.Lib","title":"Sims.Examples.Lib.CharacteristicIdealDiodes","text":"Characteristic of ideal diodes\n\nThree examples of ideal diodes are shown:\n\nThe totally ideal diode (Ideal) with all parameters to be zero\nThe nearly ideal diode with Ron=0.1 and Goff=0.1\nThe nearly ideal but displaced diode with Vknee=5 and Ron=0.1 and Goff=0.1.\n\nThe resistance and conductance are chosen untypically high since the slopes should be seen in the graphics. The voltage across the first diode is (s1 - n1). The current through the first diode is proportional to n1.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#ChuaCircuit","page":"Sims.Lib","title":"ChuaCircuit","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"ChuaCircuit","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.ChuaCircuit","page":"Sims.Lib","title":"Sims.Examples.Lib.ChuaCircuit","text":"Chua's circuit\n\nChua's circuit is a simple nonlinear circuit which shows chaotic behaviour. The circuit consists of linear basic elements (capacitors, resistor, conductor, inductor), and one nonlinear element, which is called Chua's diode. \n\nTo see the chaotic behaviour, plot n2 versus n3 (the two capacitor voltages).\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#HeatingResistor","page":"Sims.Lib","title":"HeatingResistor","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"HeatingResistor","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.HeatingResistor","page":"Sims.Lib","title":"Sims.Examples.Lib.HeatingResistor","text":"Heating resistor\n\nThis is a very simple circuit consisting of a voltage source and a resistor. The loss power in the resistor is transported to the environment via its heatPort.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#HeatingRectifier","page":"Sims.Lib","title":"HeatingRectifier","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"HeatingRectifier","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.HeatingRectifier","page":"Sims.Lib","title":"Sims.Examples.Lib.HeatingRectifier","text":"Heating rectifier\n\nThe heating rectifier shows a heat flow always if the electrical capacitor is loaded. \n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#Rectifier","page":"Sims.Lib","title":"Rectifier","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"Rectifier","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.Rectifier","page":"Sims.Lib","title":"Sims.Examples.Lib.Rectifier","text":"B6 diode bridge\n\nThe rectifier example shows a B6 diode bridge fed by a three phase sinusoidal voltage, loaded by a DC current. DC capacitors start at ideal no-load voltage, thus making easier initial transient.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#ShowSaturatingInductor","page":"Sims.Lib","title":"ShowSaturatingInductor","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"ShowSaturatingInductor","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.ShowSaturatingInductor","page":"Sims.Lib","title":"Sims.Examples.Lib.ShowSaturatingInductor","text":"Simple demo to show behaviour of SaturatingInductor component\n\nThis simple circuit uses the saturating inductor which has a changing inductivity.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\nNOTE: CURRENTLY BROKEN\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#ShowVariableResistor","page":"Sims.Lib","title":"ShowVariableResistor","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"ShowVariableResistor","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.ShowVariableResistor","page":"Sims.Lib","title":"Sims.Examples.Lib.ShowVariableResistor","text":"Simple demo of a VariableResistor model\n\nIt is a simple test circuit for the VariableResistor. The VariableResistor sould be compared with R2. isig1 and isig2 are current monitors\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#ControlledSwitchWithArc","page":"Sims.Lib","title":"ControlledSwitchWithArc","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"ControlledSwitchWithArc","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.ControlledSwitchWithArc","page":"Sims.Lib","title":"Sims.Examples.Lib.ControlledSwitchWithArc","text":"Comparison of controlled switch models both with and without arc\n\nThis example is to compare the behaviour of switch models with and without an electric arc taking into consideration.\n\na3 and b3 are proportional to the switch currents. The difference in the closing area shows that the simple arc model avoids the suddenly switching.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#CharacteristicThyristors","page":"Sims.Lib","title":"CharacteristicThyristors","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"CharacteristicThyristors","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.CharacteristicThyristors","page":"Sims.Lib","title":"Sims.Examples.Lib.CharacteristicThyristors","text":"Characteristic of ideal thyristors\n\nTwo examples of thyristors are shown: the ideal thyristor and the ideal GTO thyristor with Vknee=5.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#Heat-transfer","page":"Sims.Lib","title":"Heat transfer","text":"","category":"section"},{"location":"examples/lib/#TwoMasses","page":"Sims.Lib","title":"TwoMasses","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"TwoMasses","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.TwoMasses","page":"Sims.Lib","title":"Sims.Examples.Lib.TwoMasses","text":"Simple conduction demo\n\nThis example demonstrates the thermal response of two masses connected by a conducting element. The two masses have the same heat capacity but different initial temperatures (T1=100 [degC], T2= 0 [degC]). The mass with the higher temperature will cool off while the mass with the lower temperature heats up. They will each asymptotically approach the calculated temperature TfinalK (TfinaldegC) that results from dividing the total initial energy in the system by the sum of the heat capacities of each element.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#Motor","page":"Sims.Lib","title":"Motor","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"Motor","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.Motor","page":"Sims.Lib","title":"Sims.Examples.Lib.Motor","text":"Second order thermal model of a motor\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"examples/lib/#Rotational","page":"Sims.Lib","title":"Rotational","text":"","category":"section"},{"location":"examples/lib/#First","page":"Sims.Lib","title":"First","text":"","category":"section"},{"location":"examples/lib/","page":"Sims.Lib","title":"Sims.Lib","text":"First","category":"page"},{"location":"examples/lib/#Sims.Examples.Lib.First","page":"Sims.Lib","title":"Sims.Examples.Lib.First","text":"First example: simple drive train\n\nThe drive train consists of a motor inertia which is driven by a sine-wave motor torque. Via a gearbox the rotational energy is transmitted to a load inertia. Elasticity in the gearbox is modeled by a spring element. A linear damper is used to model the damping in the gearbox bearing.\n\nNote, that a force component (like the damper of this example) which is acting between a shaft and the housing has to be fixed in the housing on one side via component Fixed.\n\n(Image: diagram)\n\nLBL doc link  | MapleSoft doc link\n\n\n\n\n\n","category":"function"},{"location":"basics/#Documentation","page":"Basics","title":"Documentation","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"This document provides a general introduction to Sims using ModelingToolkit.","category":"page"},{"location":"basics/#Unknowns","page":"Basics","title":"Unknowns","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Models consist of equations and unknown variables. The number of equations should match the number of unknowns. In Sims, the function Unknown is used to define unknown  Symbolics.jl variables. ","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"Unknowns also contain a value. This is used for setting initial values. Unknowns can be different types. ","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"The label string is used for labeling simulation outputs. Unlabeled Unknowns are not included in results.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"Here are several ways to define Unknowns:","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"using Sims, ModelingToolkit\nx = Unknown()          # An initial value of 0.0 with an anonymous name.\ny = Unknown(1.0, name = :y)  # An initial value of 1.0 and a name of `y`.\n@named y = Unknown(1.0)       # Same.\n@named z = Unknown([1.0, 0.0])  # An Unknown with array values.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"In model equations, derivatives are specified with der or D:","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"   der(y) ~ 3","category":"page"},{"location":"basics/#Models","page":"Basics","title":"Models","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Here is a model of the Van Der Pol oscillator:","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"function Vanderpol()\n    @named y = Unknown(1.0)   \n    @named x = Unknown()       \n    @named dx = Unknown(-1.0)  \n    # The following gives the return value which is a list of equations.\n    # Expressions with Unknowns are kept as expressions. Regular\n    # variables are evaluated immediately (like normal).\n    [\n        der(x) ~ dx\n        dx ~ (1 - y^2) * x - y\n        der(y) ~ x\n    ]\nend","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"A device model is a function that returns a list of equations or other devices that also return lists of equations. ","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"Models should normally be locally balanced, meaning the number of unknowns matches the number of equations. It's pretty easy to match unknowns and equations as shown below:","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"function Capacitor(n1, n2; C) \n    i = Current()              # Unknown #1\n    v = Voltage()              # Unknown #2\n    [\n        Branch(n1, n2, v, i)      # Equation #1 - this returns `v ~ n1 - n2`\n        der(v) ~ i / C            # Equation #2\n    ]\nend","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"In the model above, the nodes n1 and n2 are also Unknowns, but they are defined outside of this model.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"Here is the top-level circuit definition. In this case, there are no input parameters. The ground reference g is assigned zero volts.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"function Circuit()\n    @named n1 = ElectricalNode()\n    @named n2 = ElectricalNode()\n    @named n3 = ElectricalNode()\n    g = 0.0  # a ground has zero volts; it's not an Unknown.\n    [\n        VSource(n1, g, V = 10.0, f = 60.0)\n        Resistor(n1, n2, R = 10.0)\n        Resistor(n2, g, R = 5.0)\n        SeriesProbe(n2, n3, name = \"Capcurrent\")\n        Capacitor(n3, g, C = 5.0e-3)\n    ]\nend","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"All of the equations returned in this list of equations are other models with different parameters.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"In this top-level model, three new Unknowns are introduced (n1, n2, and n2). Because these are nodes, each Unknown node will also cause an equation to be generated that sums the flows into the node to be zero.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"In this model, the voltages n1 and n2 are labeled, so they will appear in the output. A SeriesProbe is used to label the current through the capacitor.","category":"page"},{"location":"basics/#Simulating-a-Model","page":"Basics","title":"Simulating a Model","text":"","category":"section"},{"location":"basics/","page":"Basics","title":"Basics","text":"Steps to building and simulating a model are straightforward.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"using Sims, ModelingToolkit\nv = Vanderpol()  # returns the hierarchical model\nv_sys = system(v)     # returns the flattened model as a ModelingToolkit.ODEProblem","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"From here, all solving and plotting is done with ModelingToolkit.","category":"page"},{"location":"basics/","page":"Basics","title":"Basics","text":"st = states(v_sys)\nprob = ODAEProblem(v_sys, Dict(st[1] => 0.0, st[2] => 1.0), (0, 10.0))\nusing OrdinaryDiffEq\nsol = solve(prob, Tsit5())\nusing Plots\nplot(sol)","category":"page"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"CurrentModule = Sims.Lib","category":"page"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"Pages = [\"heat_transfer.md\"]\nDepth = 5","category":"page"},{"location":"lib/heat_transfer/#Heat-transfer-models","page":"Heat transfer models","title":"Heat transfer models","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"Library of 1-dimensional heat transfer with lumped elements","category":"page"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"These components are modeled after the Modelica.Thermal.HeatTransfer library.","category":"page"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"This package contains components to model 1-dimensional heat transfer with lumped elements. This allows especially to model heat transfer in machines provided the parameters of the lumped elements, such as the heat capacity of a part, can be determined by measurements (due to the complex geometries and many materials used in machines, calculating the lumped element parameters from some basic analytic formulas is usually not possible).","category":"page"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"Note, that all temperatures of this package, including initial conditions, are given in Kelvin.","category":"page"},{"location":"lib/heat_transfer/#Basics","page":"Heat transfer models","title":"Basics","text":"","category":"section"},{"location":"lib/heat_transfer/#HeatCapacitor","page":"Heat transfer models","title":"HeatCapacitor","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"HeatCapacitor","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.HeatCapacitor","page":"Heat transfer models","title":"Sims.Lib.HeatCapacitor","text":"Lumped thermal element storing heat\n\nHeatCapacitor(hp::HeatPort; C::Signal)\n\nArguments\n\nhp::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nC::Signal : heat capacity of the element [J/K]\n\nDetails\n\nThis is a generic model for the heat capacity of a material. No specific geometry is assumed beyond a total volume with uniform temperature for the entire volume. Furthermore, it is assumed that the heat capacity is constant (indepedent of temperature).\n\nThis component may be used for complicated geometries where the heat capacity C is determined my measurements. If the component consists mainly of one type of material, the mass m of the component may be measured or calculated and multiplied with the specific heat capacity cp of the component material to compute C:\n\n   C = cp*m.\n   Typical values for cp at 20 degC in J/(kg.K):\n      aluminium   896\n      concrete    840\n      copper      383\n      iron        452\n      silver      235\n      steel       420 ... 500 (V2A)\n      wood       2500\n\nNOTE: The Modelica Standard Library has an argument Tstart for the starting temperature [K]. You really can't use that here as in Modelica. You need to define the starting temperature at the top level for the HeatPort you define.\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#ThermalConductor","page":"Heat transfer models","title":"ThermalConductor","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"ThermalConductor","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.ThermalConductor","page":"Heat transfer models","title":"Sims.Lib.ThermalConductor","text":"Lumped thermal element transporting heat without storing it\n\nThermalConductor(port_a::HeatPort, port_b::HeatPort; G::Signal)\n\nArguments\n\nport_a::HeatPort : heat port [K]\nport_b::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nG::Signal : Constant thermal conductance of material [W/K]\n\nDetails\n\nThis is a model for transport of heat without storing it. It may be used for complicated geometries where the thermal conductance G (= inverse of thermal resistance) is determined by measurements and is assumed to be constant over the range of operations. If the component consists mainly of one type of material and a regular geometry, it may be calculated, e.g., with one of the following equations:\n\nConductance for a box geometry under the assumption that heat flows along the box length:\n\n        G = k*A/L\n        k: Thermal conductivity (material constant)\n        A: Area of box\n        L: Length of box\n\nConductance for a cylindrical geometry under the assumption that heat flows from the inside to the outside radius of the cylinder:\n\n    G = 2*pi*k*L/log(r_out/r_in)\n    pi   : Modelica.Constants.pi\n    k    : Thermal conductivity (material constant)\n    L    : Length of cylinder\n    log  : Modelica.Math.log;\n    r_out: Outer radius of cylinder\n    r_in : Inner radius of cylinder\n\nTypical values for k at 20 degC in W/(m.K):\n\n      aluminium   220\n      concrete      1\n      copper      384\n      iron         74\n      silver      407\n      steel        45 .. 15 (V2A)\n      wood         0.1 ... 0.2\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#Convection","page":"Heat transfer models","title":"Convection","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"Convection","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.Convection","page":"Heat transfer models","title":"Sims.Lib.Convection","text":"Lumped thermal element for heat convection\n\nConvection(port_a::HeatPort, port_b::HeatPort; Gc::Signal)\n\nArguments\n\nport_a::HeatPort : heat port [K]\nport_b::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nGc::Signal : convective thermal conductance [W/K]\n\nDetails\n\nThis is a model of linear heat convection, e.g., the heat transfer between a plate and the surrounding air. It may be used for complicated solid geometries and fluid flow over the solid by determining the convective thermal conductance Gc by measurements. The basic constitutive equation for convection is\n\n   Q_flow = Gc*(solidT - fluidT)\n   Q_flow: Heat flow rate from connector 'solid' (e.g. a plate)\n      to connector 'fluid' (e.g. the surrounding air)\n\nGc is an input signal to the component, since Gc is nearly never constant in practice. For example, Gc may be a function of the speed of a cooling fan. For simple situations, Gc may be calculated according to\n\n   Gc = A*h\n   A: Convection area (e.g. perimeter*length of a box)\n   h: Heat transfer coefficient\n\nwhere the heat transfer coefficient h is calculated from properties of the fluid flowing over the solid. Examples:\n\nMachines cooled by air (empirical, very rough approximation according to R. Fischer: Elektrische Maschinen, 10th edition, Hanser-Verlag 1999, p. 378):\n\n    h = 7.8*v^0.78 [W/(m2.K)] (forced convection)\n      = 12         [W/(m2.K)] (free convection)\n    where\n      v: Air velocity in [m/s]\n\nLaminar flow with constant velocity of a fluid along a flat plate where the heat flow rate from the plate to the fluid (= solid.Q_flow) is kept constant (according to J.P.Holman: Heat Transfer, 8th edition, McGraw-Hill, 1997, p.270):\n\n   h  = Nu*k/x;\n   Nu = 0.453*Re^(1/2)*Pr^(1/3);\n   where\n      h  : Heat transfer coefficient\n      Nu : = h*x/k       (Nusselt number)\n      Re : = v*x*rho/mue (Reynolds number)\n      Pr : = cp*mue/k    (Prandtl number)\n      v  : Absolute velocity of fluid\n      x  : distance from leading edge of flat plate\n      rho: density of fluid (material constant\n      mue: dynamic viscosity of fluid (material constant)\n      cp : specific heat capacity of fluid (material constant)\n      k  : thermal conductivity of fluid (material constant)\n   and the equation for h holds, provided\n      Re < 5e5 and 0.6 < Pr < 50\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#BodyRadiation","page":"Heat transfer models","title":"BodyRadiation","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"BodyRadiation","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.BodyRadiation","page":"Heat transfer models","title":"Sims.Lib.BodyRadiation","text":"BodyRadiation(port_a::HeatPort, port_b::HeatPort; Gr::Signal)\n\nArguments\n\nport_a::HeatPort : heat port [K]\nport_b::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nGr::Signal : net radiation conductance between two surfaces [m2]\n\nDetails\n\nThis is a model describing the thermal radiation, i.e., electromagnetic radiation emitted between two bodies as a result of their temperatures. The following constitutive equation is used:\n\n    Q_flow = Gr*sigma*(port_a^4 - port_b.4)\n\nwhere Gr is the radiation conductance and sigma is the Stefan-Boltzmann constant. Gr may be determined by measurements and is assumed to be constant over the range of operations.\n\nFor simple cases, Gr may be analytically computed. The analytical equations use epsilon, the emission value of a body which is in the range 0..1. Epsilon=1, if the body absorbs all radiation (= black body). Epsilon=0, if the body reflects all radiation and does not absorb any.\n\n   Typical values for epsilon:\n   aluminium, polished    0.04\n   copper, polished       0.04\n   gold, polished         0.02\n   paper                  0.09\n   rubber                 0.95\n   silver, polished       0.02\n   wood                   0.85..0.9\n\nAnalytical Equations for Gr\n\nSmall convex object in large enclosure (e.g., a hot machine in a room):\n\n    Gr = e*A\n    where\n       e: Emission value of object (0..1)\n       A: Surface area of object where radiation\n          heat transfer takes place\n\nTwo parallel plates:\n\n    Gr = A/(1/e1 + 1/e2 - 1)\n    where\n       e1: Emission value of plate1 (0..1)\n       e2: Emission value of plate2 (0..1)\n       A : Area of plate1 (= area of plate2)\n\nTwo long cylinders in each other, where radiation takes place from the inner to the outer cylinder):\n\n    Gr = 2*pi*r1*L/(1/e1 + (1/e2 - 1)*(r1/r2))\n    where\n       pi: = Modelica.Constants.pi\n       r1: Radius of inner cylinder\n       r2: Radius of outer cylinder\n       L : Length of the two cylinders\n       e1: Emission value of inner cylinder (0..1)\n       e2: Emission value of outer cylinder (0..1)\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#ThermalCollector","page":"Heat transfer models","title":"ThermalCollector","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"ThermalCollector","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.ThermalCollector","page":"Heat transfer models","title":"Sims.Lib.ThermalCollector","text":"This is a model to collect the heat flows from m heatports to one single heatport.\n\nThermalCollector(port_a::HeatPort, port_b::HeatPort)\n\nArguments\n\nport_a::HeatPort : heat port [K]\nport_b::HeatPort : heat port [K]\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#Sources","page":"Heat transfer models","title":"Sources","text":"","category":"section"},{"location":"lib/heat_transfer/#FixedTemperature","page":"Heat transfer models","title":"FixedTemperature","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"FixedTemperature","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.FixedTemperature","page":"Heat transfer models","title":"Sims.Lib.FixedTemperature","text":"Fixed temperature boundary condition in Kelvin\n\nThis model defines a fixed temperature T at its port in Kelvin, i.e., it defines a fixed temperature as a boundary condition.\n\n(Note that despite the name, the temperature can be fixed or variable. FixedTemperature and PrescribedTemperature are identical; naming is for Modelica compatibility.)\n\nFixedTemperature(port::HeatPort; T::Signal)\n\nArguments\n\nport::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nT::Signal : temperature at port [K]\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#PrescribedTemperature","page":"Heat transfer models","title":"PrescribedTemperature","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"PrescribedTemperature","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.PrescribedTemperature","page":"Heat transfer models","title":"Sims.Lib.PrescribedTemperature","text":"Variable temperature boundary condition in Kelvin\n\nThis model represents a variable temperature boundary condition. The temperature in [K] is given as input signal T to the model. The effect is that an instance of this model acts as an infinite reservoir able to absorb or generate as much energy as required to keep the temperature at the specified value.\n\n(Note that despite the name, the temperature can be fixed or variable. FixedTemperature and PrescribedTemperature are identical; naming is for Modelica compatibility.)\n\nPrescribedTemperature(port::HeatPort; T::Signal)\n\nArguments\n\nport::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nT::Signal : temperature at port [K]\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#FixedHeatFlow","page":"Heat transfer models","title":"FixedHeatFlow","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"FixedHeatFlow","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.FixedHeatFlow","page":"Heat transfer models","title":"Sims.Lib.FixedHeatFlow","text":"Fixed heat flow boundary condition\n\nThis model allows a specified amount of heat flow rate to be \"injected\" into a thermal system at a given port. The constant amount of heat flow rate Qflow is given as a parameter. The heat flows into the component to which the component FixedHeatFlow is connected, if parameter Qflow is positive.\n\nIf parameter alpha is > 0, the heat flow is mulitplied by (1 + alpha*(port - Tref)) in order to simulate temperature dependent losses (which are given an reference temperature Tref).\n\n(Note that despite the name, the heat flow can be fixed or variable.)\n\nFixedHeatFlow(port::HeatPort; Q_flow::Signal, T_ref::Signal = 293.15, alpha::Signal = 0.0)\n\nArguments\n\nport::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nQ_flow::Signal : heat flow [W]\n\nKeyword/Optional Arguments\n\nT_ref::Signal : reference temperature [K]\nalpha::Signal : temperature coefficient of heat flow rate [1/K]\n\n\n\n\n\n","category":"function"},{"location":"lib/heat_transfer/#PrescribedHeatFlow","page":"Heat transfer models","title":"PrescribedHeatFlow","text":"","category":"section"},{"location":"lib/heat_transfer/","page":"Heat transfer models","title":"Heat transfer models","text":"PrescribedHeatFlow","category":"page"},{"location":"lib/heat_transfer/#Sims.Lib.PrescribedHeatFlow","page":"Heat transfer models","title":"Sims.Lib.PrescribedHeatFlow","text":"Prescribed heat flow boundary condition\n\nThis model allows a specified amount of heat flow rate to be \"injected\" into a thermal system at a given port. The constant amount of heat flow rate Qflow is given as a parameter. The heat flows into the component to which the component PrescribedHeatFlow is connected, if parameter Qflow is positive.\n\nIf parameter alpha is > 0, the heat flow is mulitplied by (1 + alpha*(port - Tref)) in order to simulate temperature dependent losses (which are given an reference temperature Tref).\n\n(Note that despite the name, the heat flow can be fixed or variable.)\n\nPrescribedHeatFlow(port::HeatPort, Q_flow::Signal; T_ref::Signal = 293.15, alpha::Signal = 0.0)\n\nArguments\n\nport::HeatPort : heat port [K]\nQ_flow::Signal : heat flow [W]\n\nKeyword/Optional Arguments\n\nT_ref::Signal : reference temperature [K]\nalpha::Signal : temperature coefficient of heat flow rate [1/K]\n\n\n\n\n\n","category":"function"},{"location":"sims/","page":"API","title":"API","text":"CurrentModule = Sims","category":"page"},{"location":"sims/","page":"API","title":"API","text":"Pages = [\"sims.md\"]\nDepth = 5","category":"page"},{"location":"sims/","page":"API","title":"API","text":"The API for building models with Sims. Includes basic types, models, and functions.","category":"page"},{"location":"sims/#t","page":"API","title":"t","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"t","category":"page"},{"location":"sims/#Sims.t","page":"API","title":"Sims.t","text":"Independent variable \n\n\n\n\n\n","category":"constant"},{"location":"sims/#D","page":"API","title":"D","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"D","category":"page"},{"location":"sims/#Sims.D","page":"API","title":"Sims.D","text":"Differential(t) \n\n\n\n\n\n","category":"function"},{"location":"sims/#der","page":"API","title":"der","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"der","category":"page"},{"location":"sims/#Sims.der","page":"API","title":"Sims.der","text":"Differential(t) \n\n\n\n\n\n","category":"function"},{"location":"sims/#Unknown","page":"API","title":"Unknown","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"Unknown","category":"page"},{"location":"sims/#Sims.Unknown","page":"API","title":"Sims.Unknown","text":"Unknown(value = 0.0; name = :u) \n\nUnknown is a helper to create variables with default values. The default values determines the type and shape of the result. It also adds metadata to variables to that variable names don't clash. The viewable variable name is based on a gensym. name is stored as metadata, and when equations are flattened with system, variables are renamed to include subsystem names and varable base name. \n\nFor example, Unknown(:v) may show as var\"##v#1057\"(t), but after flattening, it will show as something like ss₊c1₊v(t)  (ss and c1 are subsystems).\n\n\n\n\n\n","category":"function"},{"location":"sims/#RefBranch","page":"API","title":"RefBranch","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"RefBranch","category":"page"},{"location":"sims/#Sims.RefBranch","page":"API","title":"Sims.RefBranch","text":"A special ModelType to specify branch flows into nodes. When the model is flattened, equations are created to zero out branch flows into nodes. \n\nSee also Branch.\n\nRefBranch(n, i) \n\nArguments\n\nn : the reference node.\ni : the flow variable that goes with this node.\n\nReferences\n\nThis nodal description is based on work by David Broman. See the following:\n\nhttp://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-173.pdf\nhttp://www.bromans.com/software/mkl/mkl-source-1.0.0.zip\nhttps://github.com/david-broman/modelyze\n\nModelyze has both RefBranch and Branch.\n\nExamples\n\nHere is an example of RefBranch used in the definition of a HeatCapacitor in the standard library. hp is the reference node (a HeatPort aka Temperature), and Q_flow is the flow variable.\n\nfunction HeatCapacitor(hp::HeatPort, C::Signal)\n    Q_flow = HeatFlow(compatible_values(hp))\n    [\n        RefBranch(hp, Q_flow)\n        der(hp) ~ Q_flow ./ C\n    ]\nend\n\nHere is the definition of SignalCurrent from the standard library a model that injects current (a flow variable) between two nodes:\n\nfunction SignalCurrent(n1::ElectricalNode, n2::ElectricalNode, I::Signal)  \n    [\n        RefBranch(n1, I) \n        RefBranch(n2, -I) \n    ]\nend\n\n\n\n\n\n","category":"type"},{"location":"sims/#Branch","page":"API","title":"Branch","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"Branch","category":"page"},{"location":"sims/#Sims.Branch","page":"API","title":"Sims.Branch","text":"A helper Model to connect a branch between two different nodes and specify potential between nodes and the flow between nodes.\n\nSee also RefBranch.\n\nBranch(n1, n2, v, i)\n\nArguments\n\nn1 : the positive reference node.\nn2 : the negative reference node.\nv : the potential variable between nodes.\ni : the flow variable between nodes.\n\nReturns\n\nThe model, consisting of a RefBranch entry for each node and an equation assigning v to n1 - n2.\n\nReferences\n\nThis nodal description is based on work by David Broman. See the following:\n\nhttp://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-173.pdf\nhttp://www.bromans.com/software/mkl/mkl-source-1.0.0.zip\nhttps://github.com/david-broman/modelyze\n\nExamples\n\nHere is the definition of an electrical resistor in the standard library:\n\nfunction Resistor(n1::ElectricalNode, n2::ElectricalNode, R::Signal)\n    i = Current(compatible_values(n1, n2))\n    v = Voltage(value(n1) - value(n2))\n    [\n        Branch(n1, n2, v, i)\n        v ~ R .* i\n    ]\nend\n\n\n\n\n\n","category":"function"},{"location":"sims/#system","page":"API","title":"system","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"system","category":"page"},{"location":"sims/#Sims.system","page":"API","title":"Sims.system","text":"system is the main elaboration/flattening function that returns an ODESystem.\n\nsystem(a)\n\nArguments\n\na : the input model containing a nested vector of equations\n\nOptional/Keyword Arguments\n\nsimplify = true : whether structural_simplify is used to simplify results \n\nReturns\n\n::ODESystem : the flattened model\n\n\n\n\n\n","category":"function"},{"location":"sims/#default_value","page":"API","title":"default_value","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"default_value","category":"page"},{"location":"sims/#Sims.default_value","page":"API","title":"Sims.default_value","text":"The default or starting value of a variable.\n\ndefault_value(x) \n\nArguments\n\nx : the reference variable or numeric value.\n\n\n\n\n\n","category":"function"},{"location":"sims/#compatible_values","page":"API","title":"compatible_values","text":"","category":"section"},{"location":"sims/","page":"API","title":"API","text":"compatible_values","category":"page"},{"location":"sims/#Sims.compatible_values","page":"API","title":"Sims.compatible_values","text":"A helper functions to return the base value from a variable to use when creating other variables. It is especially useful for taking two model arguments and creating a new variable compatible with both arguments.\n\ncompatible_values(x,y)\ncompatible_values(x)\n\nIt's still somewhat broken but works for basic cases. No type promotion is currently done.\n\nArguments\n\nx, y : objects or variables\n\nReturns\n\nThe returned object has zeros of type and length common to both x and y.\n\nExamples\n\na = Unknown(45.0 + 10im)\nx = Unknown(compatible_values(a))   # Initialized to 0.0 + 0.0im.\na = Unknown()\nb = Unknown([1., 0.])\ny = Unknown(compatible_values(a,b)) # Initialized to [0.0, 0.0].\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"CurrentModule = Sims.Lib","category":"page"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"Pages = [\"rotational.md\"]\nDepth = 5","category":"page"},{"location":"lib/rotational/#Rotational-mechanics","page":"Rotational mechanics","title":"Rotational mechanics","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"Library to model 1-dimensional, rotational mechanical systems","category":"page"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"Rotational provides 1-dimensional, rotational mechanical components to model in a convenient way drive trains with frictional losses.","category":"page"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"These components are modeled after the Modelica.Mechanics.Rotational library.","category":"page"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"NOTE: these need more testing.","category":"page"},{"location":"lib/rotational/#Basic-models","page":"Rotational mechanics","title":"Basic models","text":"","category":"section"},{"location":"lib/rotational/#Inertia","page":"Rotational mechanics","title":"Inertia","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"Inertia","category":"page"},{"location":"lib/rotational/#Sims.Lib.Inertia","page":"Rotational mechanics","title":"Sims.Lib.Inertia","text":"1D-rotational component with inertia\n\nRotational component with inertia at a flange (or between two rigidly connected flanges).\n\nInertia(flange_a::Flange; J::Real)\nInertia(flange_a::Flange, flange_b::Flange; J::Real)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\n\nKeyword/Optional Arguments\n\nJ::Real : Moment of inertia [kg.m^2]\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#Disc","page":"Rotational mechanics","title":"Disc","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"Disc","category":"page"},{"location":"lib/rotational/#Sims.Lib.Disc","page":"Rotational mechanics","title":"Sims.Lib.Disc","text":"1-dim. rotational rigid component without inertia, where right flange is rotated by a fixed angle with respect to left flange\n\nRotational component with two rigidly connected flanges without inertia. The right flange is rotated by the fixed angle \"deltaPhi\" with respect to the left flange.\n\nDisc(flange_a::Flange, flange_b::Flange; deltaPhi)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\n\nKeyword/Optional Arguments\n\ndeltaPhi::Signal : rotation of left flange with respect to right flange (= flangeb - flangea) [rad]\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#Spring","page":"Rotational mechanics","title":"Spring","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"Spring","category":"page"},{"location":"lib/rotational/#Sims.Lib.Spring","page":"Rotational mechanics","title":"Sims.Lib.Spring","text":"Linear 1D rotational spring\n\nA linear 1D rotational spring. The component can be connected either between two inertias/gears to describe the shaft elasticity, or between a inertia/gear and the housing (component Fixed), to describe a coupling of the element with the housing via a spring.\n\nSpring(flange_a::Flange, flange_b::Flange; c::Real, phi_rel0 = 0.0)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\n\nKeyword/Optional Arguments\n\nc: spring constant [N.m/rad]\nphi_rel0 : unstretched spring angle [rad]\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#Damper","page":"Rotational mechanics","title":"Damper","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"Damper","category":"page"},{"location":"lib/rotational/#Sims.Lib.Damper","page":"Rotational mechanics","title":"Sims.Lib.Damper","text":"Linear 1D rotational damper\n\nLinear, velocity dependent damper element. It can be either connected between an inertia or gear and the housing (component Fixed), or between two inertia/gear elements.\n\nDamper(flange_a::Flange, flange_b::Flange; d::Signal)\nDamper(flange_a::Flange, flange_b::Flange, hp::HeatPort; d::Signal)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\nhp::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nd: \tdamping constant [N.m.s/rad]\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#SpringDamper","page":"Rotational mechanics","title":"SpringDamper","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"SpringDamper","category":"page"},{"location":"lib/rotational/#Sims.Lib.SpringDamper","page":"Rotational mechanics","title":"Sims.Lib.SpringDamper","text":"Linear 1D rotational spring and damper in parallel\n\nA spring and damper element connected in parallel. The component can be connected either between two inertias/gears to describe the shaft elasticity and damping, or between an inertia/gear and the housing (component Fixed), to describe a coupling of the element with the housing via a spring/damper.\n\nSpringDamper(flange_a::Flange, flange_b::Flange, c::Signal, d::Signal)\nSpringDamper(flange_a::Flange, flange_b::Flange, hp::HeatPort, c::Signal, d::Signal)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\nhp::HeatPort : heat port [K]\n\nKeyword/Optional Arguments\n\nc: \tspring constant [N.m/rad]\nd: \tdamping constant [N.m.s/rad]\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#IdealGear","page":"Rotational mechanics","title":"IdealGear","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"IdealGear","category":"page"},{"location":"lib/rotational/#Sims.Lib.IdealGear","page":"Rotational mechanics","title":"Sims.Lib.IdealGear","text":"Ideal gear without inertia\n\nThis element characterices any type of gear box which is fixed in the ground and which has one driving shaft and one driven shaft. The gear is ideal, i.e., it does not have inertia, elasticity, damping or backlash. If these effects have to be considered, the gear has to be connected to other elements in an appropriate way.\n\nIdealGear(flange_a::Flange, flange_b::Flange, ratio)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\n\nKeyword/Optional Arguments\n\nratio : transmission ratio (flangea / flangeb)\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#Miscellaneous","page":"Rotational mechanics","title":"Miscellaneous","text":"","category":"section"},{"location":"lib/rotational/#MBranchHeatPort","page":"Rotational mechanics","title":"MBranchHeatPort","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"MBranchHeatPort","category":"page"},{"location":"lib/rotational/#Sims.Lib.MBranchHeatPort","page":"Rotational mechanics","title":"Sims.Lib.MBranchHeatPort","text":"Wrap argument model with a heat port that captures the power generated by the device. This is vectorizable.\n\nMBranchHeatPort(flange_a::Flange, flange_b::Flange, hp::HeatPort,\n                model::Function, args...)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\nhp::HeatPort : Heat port [K]                \nmodel::Function : Model to wrap\nargs... : Arguments passed to model  \n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#Sensors","page":"Rotational mechanics","title":"Sensors","text":"","category":"section"},{"location":"lib/rotational/#SpeedSensor","page":"Rotational mechanics","title":"SpeedSensor","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"SpeedSensor","category":"page"},{"location":"lib/rotational/#Sims.Lib.SpeedSensor","page":"Rotational mechanics","title":"Sims.Lib.SpeedSensor","text":"Ideal sensor to measure the absolute flange angular velocity\n\nMeasures the absolute angular velocity w of a flange in an ideal way and provides the result as output signal w.\n\nSpeedSensor(flange::Flange; w::Signal)\n\nArguments\n\nflange::Flange : left flange of shaft [rad]\n\nKeyword/Optional Arguments\n\nw::Signal: \tabsolute angular velocity of the flange [rad/sec]\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#AccSensor","page":"Rotational mechanics","title":"AccSensor","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"AccSensor","category":"page"},{"location":"lib/rotational/#Sims.Lib.AccSensor","page":"Rotational mechanics","title":"Sims.Lib.AccSensor","text":"Ideal sensor to measure the absolute flange angular acceleration\n\nMeasures the absolute angular velocity a of a flange in an ideal way and provides the result as output signal a.\n\nSpeedSensor(flange::Flange; a::Signal)\n\nArguments\n\nflange::Flange : left flange of shaft [rad]\n\nKeyword/Optional Arguments\n\na::Signal: \tabsolute angular acceleration of the flange [rad/sec^2]\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#Sources","page":"Rotational mechanics","title":"Sources","text":"","category":"section"},{"location":"lib/rotational/#SignalTorque","page":"Rotational mechanics","title":"SignalTorque","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"SignalTorque","category":"page"},{"location":"lib/rotational/#Sims.Lib.SignalTorque","page":"Rotational mechanics","title":"Sims.Lib.SignalTorque","text":"Input signal acting as external torque on a flange\n\nThe input signal tau defines an external torque in [Nm] which acts (with negative sign) at a flange connector, i.e., the component connected to this flange is driven by torque tau.\n\nSignalTorque(flange_a::Flange, flange_b::Flange, tau)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\n\nKeyword/Optional Arguments\n\ntau : Accelerating torque acting at flangea relative to flangeb (normally a support); a positive value accelerates flange_a\n\n\n\n\n\n","category":"function"},{"location":"lib/rotational/#QuadraticSpeedDependentTorque","page":"Rotational mechanics","title":"QuadraticSpeedDependentTorque","text":"","category":"section"},{"location":"lib/rotational/","page":"Rotational mechanics","title":"Rotational mechanics","text":"QuadraticSpeedDependentTorque","category":"page"},{"location":"lib/rotational/#Sims.Lib.QuadraticSpeedDependentTorque","page":"Rotational mechanics","title":"Sims.Lib.QuadraticSpeedDependentTorque","text":"Quadratic dependency of torque versus speed\n\nModel of torque, quadratic dependent on angular velocity of flange. Parameter TorqueDirection chooses whether direction of torque is the same in both directions of rotation or not.\n\nQuadraticSpeedDependentTorque(flange_a::Flange, flange_b::Flange;\n                              tau_nominal::Signal, TorqueDirection::Bool, w_nominal::Signal)\n\nArguments\n\nflange_a::Flange : left flange of shaft [rad]\nflange_b::Flange : right flange of shaft [rad]\n\nKeyword/Optional Arguments\n\ntau_nominal::Signal : nominal torque (if negative, torque is acting as a load) [N.m]\nTorqueDirection::Bool : same direction of torque in both directions of rotation\nAngularVelocity::Signal : nominal speed [rad/sec]\n\n\n\n\n\n","category":"function"},{"location":"NEWS/#Sims-v0.3.0-Release-Notes","page":"Release notes","title":"Sims v0.3.0 Release Notes","text":"","category":"section"},{"location":"NEWS/","page":"Release notes","title":"Release notes","text":"Update to use ModelingToolkit\nNo support for events or discrete systems currently","category":"page"},{"location":"NEWS/#Sims-v0.2.0-Release-Notes","page":"Release notes","title":"Sims v0.2.0 Release Notes","text":"","category":"section"},{"location":"NEWS/","page":"Release notes","title":"Release notes","text":"Update to support Julia v0.5\nSwitch from Reactive to ReactiveBasics for Discrete's\nUse Documenter for documentation","category":"page"},{"location":"NEWS/#Sims-v0.1.0-Release-Notes","page":"Release notes","title":"Sims v0.1.0 Release Notes","text":"","category":"section"},{"location":"NEWS/","page":"Release notes","title":"Release notes","text":"This is the first tagged release version. Recent highlights of this release include:","category":"page"},{"location":"NEWS/","page":"Release notes","title":"Release notes","text":"Removal of global variables and general simulation API improvements (Ivan Raikov)\nMore than 15 model example of neural systems (Ivan Raikov)\nBug fixes in structural models (Ivan Raikov)\nDocumentation system based on Docile/Lexicon/Mkdocs (Tom Short)\nReorganization into Sims, Sims.Lib, Sims.Example, and Sims.Example.* modules (Tom Short)","category":"page"},{"location":"design/#Design-Documentation","page":"Design Documentation","title":"Design Documentation","text":"","category":"section"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"This documentation is an overview of the design of Sims, particularly the input specification. Some of the internals are also discussed.","category":"page"},{"location":"design/#Overview","page":"Design Documentation","title":"Overview","text":"","category":"section"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"This implementation follows the work of David Broman and his MKL and Modelyze simulators and the work of George Giorgidze and Henrik Nilsson and their functional hybrid modeling.","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"A nodal formulation is used based on David's work. His thesis documents this nicely:","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"David Broman. Meta-Languages and Semantics for Equation-Based Modeling and Simulation. PhD thesis, Thesis No 1333. Department of Computer and Information Science, Linköping University, Sweden, 2010. http://www.bromans.com/david/publ/thesis-2010-david-broman.pdf","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"Here is David's code and home page:","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"http://web.ict.kth.se/~dbro/\nhttp://www.eecs.berkeley.edu/Pubs/TechRpts/2012/EECS-2012-173.pdf\nhttp://www.bromans.com/software/mkl/mkl-source-1.0.0.zip\nhttps://github.com/david-broman/modelyze","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"Sims implements something like David's approach in MKL and Modelyze. Modelyze models in particular look quite similar to Sims models. A model constructor returns a list of equations. Models are made of models, so this builds up a hierarchical structure of equations that then needs to be flattened. Like David's approach, Sims is nodal; nodes are passed in as parameters to models to perform connections between devices. ","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"Modeling of dynamically varying systems is handled similarly to functional hybrid modelling (FHM), specifically the Hydra implementation by George. See here for links:","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"https://github.com/giorgidze/Hydra\nhttp://www.cs.nott.ac.uk/~nhn/","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"FHM is also a functional approach. Hydra is implemented as a domain specific language embedded in Haskell. Their implementation handles dynamically changing systems with JIT-compiled code from an amazingly small amount of code.","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"Models can have positional function arguments and/or keyword function arguments. Arguments may also have defaults. By convention in the standard library, all models are defined with positional  arguments for arguments that are normally nodes and keyword arguments for all other model parameters.","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"As with most functional approaches, arguments to models can be model types. This \"functional composition\" allows for easier replacement of internal model subcomponents. For example, the BranchHeatPort in the standard electrical library has the following signature:","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"function BranchHeatPort(n1::ElectricalNode, n2::ElectricalNode, hp::HeatPort,\n                        model::Function; args...)","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"This can be used to add heat ports to any electrical branch passed in with model. Here's an example of a definition defining a Resistor that uses a heat port (a Temperature) in terms of another model:","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"function Resistor(n1::ElectricalNode, n2::ElectricalNode; R::Signal, hp::Temperature, T_ref::Signal, alpha::Signal) \n    BranchHeatPort(n1, n2, hp, Resistor, R = R .* (1 + alpha .* (hp - T_ref)))\nend","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"By convention in the standard library, the first model arguments are generally nodes.","category":"page"},{"location":"design/#Special-Model-Features","page":"Design Documentation","title":"Special Model Features","text":"","category":"section"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"The following are special model types, functions, or models that are handled specially when flattening or during instantiation:","category":"page"},{"location":"design/","page":"Design Documentation","title":"Design Documentation","text":"der(x) or D(x) – The time derivative of x.\nt – The model time, secs.\nRefBranch(node, flowvariable) – The type RefBranch is used to indicate the potential node and the flow (flowvariable) into the node from a branch connected to it.","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"CurrentModule = Sims.Lib","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Pages = [\"types.md\"]\nDepth = 5","category":"page"},{"location":"lib/types/#The-Sims-standard-library","page":"The Sims standard library","title":"The Sims standard library","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"NOTE: Many of these components are unfinished or broken. These are mainly components that require events and support of discrete systems.","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"These components are available with Sims.Lib.","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Normal usage is:","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"using Sims\nusing Sims.Lib\n\n# modeling...","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Library components include models for:","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Electrical circuits\nHeat transfer\nRotational mechanics","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Most of the components mimic those in the Modelica Standard Library.","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"The main types for Unknowns and signals defined in Sims.Lib include:","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":" Flow/through variable Node/across variable Node helper type\nElectrical systems Current Voltage ElectricalNode\nHeat transfer HeatFlow Temperature HeatPort\nMechanical rotation Torque Angle Flange","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"ModelingToolkit does not have variable types, so Signal, ElectricalNode, HeatPort, and Flange are all aliases of Any, mainly to help with documentation of models.","category":"page"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Current, Voltage, HeatFlow, Temperature, Torque, and Angle are all helper functions  that create variables with gensym.","category":"page"},{"location":"lib/types/#Signal","page":"The Sims standard library","title":"Signal","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Signal","category":"page"},{"location":"lib/types/#Sims.Lib.Signal","page":"The Sims standard library","title":"Sims.Lib.Signal","text":"Signal is an alias for Any used to indicate a signal value or variable. \n\n\n\n\n\n","category":"type"},{"location":"lib/types/#ElectricalNode","page":"The Sims standard library","title":"ElectricalNode","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"ElectricalNode","category":"page"},{"location":"lib/types/#Sims.Lib.ElectricalNode","page":"The Sims standard library","title":"Sims.Lib.ElectricalNode","text":"ElectricalNode is an alias for Any used to indicate a node voltage value or variable. \n\n\n\n\n\n","category":"type"},{"location":"lib/types/#HeatPort","page":"The Sims standard library","title":"HeatPort","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"HeatPort","category":"page"},{"location":"lib/types/#Sims.Lib.HeatPort","page":"The Sims standard library","title":"Sims.Lib.HeatPort","text":"HeatPort is an alias for Any used to indicate a value or variable for a temperature port. \n\n\n\n\n\n","category":"type"},{"location":"lib/types/#Flange","page":"The Sims standard library","title":"Flange","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Flange","category":"page"},{"location":"lib/types/#Sims.Lib.Flange","page":"The Sims standard library","title":"Sims.Lib.Flange","text":"Flange is an alias for Any used to indicate a value or variable for a flange port (an angle). \n\n\n\n\n\n","category":"type"},{"location":"lib/types/#Current","page":"The Sims standard library","title":"Current","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Current","category":"page"},{"location":"lib/types/#Sims.Lib.Current","page":"The Sims standard library","title":"Sims.Lib.Current","text":"Current(x = 0.0; name = :i) creates an Unknown with a default name of :i. \n\n\n\n\n\n","category":"function"},{"location":"lib/types/#Voltage","page":"The Sims standard library","title":"Voltage","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Voltage","category":"page"},{"location":"lib/types/#Sims.Lib.Voltage","page":"The Sims standard library","title":"Sims.Lib.Voltage","text":"Voltage(x = 0.0; name = :i) creates an Unknown with a default name of :v. \n\n\n\n\n\n","category":"function"},{"location":"lib/types/#HeatFlow","page":"The Sims standard library","title":"HeatFlow","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"HeatFlow","category":"page"},{"location":"lib/types/#Sims.Lib.HeatFlow","page":"The Sims standard library","title":"Sims.Lib.HeatFlow","text":"HeatFlow(x = 0.0; name = :i) creates an Unknown with a default name of :hf. \n\n\n\n\n\n","category":"function"},{"location":"lib/types/#Temperature","page":"The Sims standard library","title":"Temperature","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Temperature","category":"page"},{"location":"lib/types/#Sims.Lib.Temperature","page":"The Sims standard library","title":"Sims.Lib.Temperature","text":"Temperature(x = 0.0; name = :i) creates an Unknown with a default name of :T. \n\n\n\n\n\n","category":"function"},{"location":"lib/types/#Torque","page":"The Sims standard library","title":"Torque","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Torque","category":"page"},{"location":"lib/types/#Sims.Lib.Torque","page":"The Sims standard library","title":"Sims.Lib.Torque","text":"Torque(x = 0.0; name = :i) creates an Unknown with a default name of :torque. \n\n\n\n\n\n","category":"function"},{"location":"lib/types/#Angle","page":"The Sims standard library","title":"Angle","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"Angle","category":"page"},{"location":"lib/types/#Sims.Lib.Angle","page":"The Sims standard library","title":"Sims.Lib.Angle","text":"Angle(x = 0.0; name = :i) creates an Unknown with a default name of :angle. \n\n\n\n\n\n","category":"function"},{"location":"lib/types/#AngularVelocity","page":"The Sims standard library","title":"AngularVelocity","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"AngularVelocity","category":"page"},{"location":"lib/types/#Sims.Lib.AngularVelocity","page":"The Sims standard library","title":"Sims.Lib.AngularVelocity","text":"AngularVelocity(x = 0.0; name = :i) creates an Unknown with a default name of :angvelocity. \n\n\n\n\n\n","category":"function"},{"location":"lib/types/#AngularAcceleration","page":"The Sims standard library","title":"AngularAcceleration","text":"","category":"section"},{"location":"lib/types/","page":"The Sims standard library","title":"The Sims standard library","text":"AngularAcceleration","category":"page"},{"location":"lib/types/#Sims.Lib.AngularAcceleration","page":"The Sims standard library","title":"Sims.Lib.AngularAcceleration","text":"AngularAcceleration(x = 0.0; name = :i) creates an Unknown with a default name of :angacceleration. \n\n\n\n\n\n","category":"function"},{"location":"LICENSE/","page":"License","title":"License","text":"Sims.jl is licensed under the MIT License:","category":"page"},{"location":"LICENSE/","page":"License","title":"License","text":"Copyright (c) 2012 - 2021, Electric Power Research InstitutePermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"LICENSE/","page":"License","title":"License","text":"This code also contains documentation adapted from the Modelica Standard Library available under the Modelica License Version 2 (an allowed usage). See here:","category":"page"},{"location":"LICENSE/","page":"License","title":"License","text":"https://www.modelica.org/licenses/ModelicaLicense2 https://www.modelica.org/news_items/modelica-standard-library-3.2.1-released","category":"page"},{"location":"#Sims.jl","page":"Home","title":"Sims.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for equation-based modeling and simulations using ModelingToolkit.","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sims is like a lite version of Modelica. This package is for non-causal modeling in Julia. The idea behind non-causal modeling is that the user develops models based on components which are described by a set of equations. A tool can then transform the equations and solve the differential algebraic equations. Non-causal models tend to match their physical counterparts in terms of their specification and implementation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Causal modeling is where all signals have an input and an output, and the flow of information is clear. Simulink is the highest-profile example. The problem with causal modeling is that it is difficult to build up models from components.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The highest profile noncausal modeling tools are in the Modelica family. The MathWorks company also has Simscape that uses Matlab notation. Modelica is an object-oriented, open language with multiple implementations. It is a large, complex, powerful language with an extensive standard library of components.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This implementation follows the work of David Broman (thesis and code) and George Giorgidze (Hydra code and thesis) and Henrik Nilsson and their functional hybrid modeling. Sims is most similar to Modelyze by David Broman (report).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sims creates a ModelingToolkit component. ModelingToolkit can be used directly for noncausal modeling with more traditional composition of components with connect and subsystems. Sims differs by using a  more functional approach to composition.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sims is an installable package. To install Sims, use the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pkg.add(\"Sims\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sims.jl has one main module named Sims and the following submodules:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Sims.Lib – the standard library\nSims.Examples – example models, including:\nSims.Examples.Basics\nSims.Examples.Lib","category":"page"}]
}
